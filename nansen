#!/usr/bin/python
import npyscreen,subprocess,json,urllib2,os,sys,socket,threading,time,Queue,thread,logging
logfile = "nansen.log" if "-d" in sys.argv else "/dev/null"
logging.basicConfig(filename=logfile,level=logging.DEBUG)
logging.debug("starting")

def consuldata(query,timeout=1,timeoutok=False):
    consul_host = os.getenv('CONSUL_HOST', "127.0.0.1")
    try:
        response = urllib2.urlopen("http://%(consul_host)s:8500/v1/%(query)s" % locals(),timeout = timeout)
        return (json.loads(response.read()),response.info().getheader('X-Consul-Index'))
    except socket.timeout as e:
        # For Python 2.7
        if not timeoutok:
            raise Exception("There was an error connecting to consul: %r" % e)

def consul(query):
    return consuldata(query)[0]

def consulgenerator(query):
    try:
        data,index = consuldata(query)
        logging.debug("got first")
        yield data,index
        while True:            
            if "?" in query:
                data,index = consuldata("%s&wait=30s&index=%s" % (query,index),timeout=31,timeoutok=True)
            else:
                data,index = consuldata("%s?wait=30s&index=%s" % (query,index),timeout=31,timeoutok=True)
            logging.debug("got again")
            yield data,index
    except Exception as ex:
        logging.error("failed "+str(ex))

def matches(server):
    if len(sys.argv) > 1:
        return (sys.argv[1] in server)
    return True

def ops(i):
    if len(sys.argv) > 2:
        return "/usr/bin/sudo /usr/bin/docker-enter %s %s" % (i,sys.argv[2])
    else:
        return "/usr/bin/sudo /usr/bin/docker-enter %s" % i

class ContainerTree(npyscreen.MLTree):
    def handle_mouse_event(self,m):
        super(ContainerTree,self).handle_mouse_event(m)
        self.h_select(m)

    def h_select(self,ch):
       if self.cursor_line==0:
           return
       item = self.values[self.cursor_line]
       global execl
       ssh_opts = [i for i in os.getenv('SSH_OPTS', "").split(" ") if len(i)>0]
       if item.operation:
          execl = ["/usr/bin/ssh","-t","-A","-o","StrictHostKeyChecking=no"]+ssh_opts+[ item.address, item.operation]
       else:
          execl = ["/usr/bin/ssh","-t","-A","-o","StrictHostKeyChecking=no"]+ssh_opts+[ item.address]
       self.parentForm.parentApp.switchForm(None)

class BaseTreeForm(npyscreen.FormBaseNew):
      def __init__(self,*args,**bargs):
        self.age=bargs["age"]
        super(BaseTreeForm, self).__init__(*args,**bargs)
    
      def create(self):
        env = consul("agent/self")["Config"]["Datacenter"]
        title = "In the "+env+" dc: (updated at "+time.ctime()+")"+str(self.age)
        cats = [consul("health/service/"+k+"?passing=true") for (k,v) in consul("catalog/services").items() if 'registrator' in v]
        ssh  = consul("health/service/ssh?passing=true")
        addresses = dict([(host['Node']['Node'],host['Node']['Address']) for host in ssh])
        hosts = dict([(host['Node']['Node'],[]) for host in ssh if matches(host['Node']['Node'])])
        #title = ssh[0]
        dockers = [serv['Service']['ID'].split(":")[0:2]+[serv["Service"]["Service"]] for serv in sum(cats,[])]
        types=dict()
        for (k,v,t) in dockers:
            if k in hosts:
                hosts[k].append(v)
                types[v]=t
        treedata = npyscreen.NPSTreeData(content=title, selectable=True, selected=True, ignoreRoot=False)
        for k,v in sorted(hosts.items()):
            branch = treedata.newChild(content=k, selectable=True)
            branch.operation = False
            branch.address = addresses[k]
            for i in sorted(v):
                leaf = branch.newChild(content=types[i], selectable=True)
                leaf.operation = ops(i)
                leaf.address = addresses[k]
        wgtree = self.add(ContainerTree)
        wgtree.parentForm = self
        wgtree.values = treedata
        self.wgtree=wgtree

class WaitForm(npyscreen.Form):
    def create(self):
        self.add(npyscreen.TitleText, name = "Waiting:", value= "Waiting for data" )

class ContainerTreeApp(npyscreen.StandardApp):    
    @staticmethod
    def worker(self):
        logging.debug("started worker")
        for _,index in consulgenerator("catalog/services"):
            logging.debug("got "+str(index))
            self.queue_event(npyscreen.Event("REFRESH",index)) 

    def onStart(self):
        logging.debug("starting"+str(ContainerTreeApp.worker))
        self.t = thread.start_new_thread(ContainerTreeApp.worker,(self,))
        self.add_event_hander("REFRESH", self.refresh) 
        self.addForm("MAIN", WaitForm, framed=False)
        #self.addForm("MAIN", BaseTreeForm, framed=False, age="0")
        
    def refresh(self, event):
        logging.debug("runnning refresh with"+str(event.payload))
        self.addForm("MAIN", BaseTreeForm, framed=False, age=event.payload)
        self.switchForm("MAIN")
        self.resetHistory()

    def onCleanExit(self):
        pass

    def change_form(self, name):
        self.switchForm(name)


def main():
   try:
       if len(consul("catalog/service/ssh")) < 1:
           print "No ssh service in consul, try the included ssh.json"
       TA = ContainerTreeApp()
       TA.run()
       logging.debug("executing"+execl)
       if len(execl) > 0:
           print " ".join(execl)
           sys.stdout.flush()
           subprocess.call(execl)
   except KeyboardInterrupt:
       print "Ctrl-c"
   except IOError:
       consul_host = os.getenv('CONSUL_HOST', "127.0.0.1")
       print "Error connecting to consul (%(consul_host)s:8500)" % locals()



if __name__ == '__main__':
    main()
