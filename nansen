#!/usr/bin/python
import npyscreen,subprocess,json,urllib2,os,sys,socket,threading,time,Queue

def consuldata(query):
    consul_host = os.getenv('CONSUL_HOST', "127.0.0.1")
    try:
        response = urllib2.urlopen("http://%(consul_host)s:8500/v1/%(query)s" % locals(),timeout = 1)
        return (json.loads(response.read()),response.info().getheader('X-Consul-Index'))
    except socket.timeout, e:
        # For Python 2.7
        raise Exception("There was an error connecting to consul: %r" % e)

def consul(query):
    return consuldata(query)[0]

def consulgenerator(query):
    data,index = consuldata(query)
    yield data,index
    while True:
        if "?" in query:
            data,index = consuldata("%s&index=%s" % (query,index))
        else:
            data,index = consuldata("%s?index=%s" % (query,index))
        yield data,index

def matches(server):
    if len(sys.argv) > 1:
        return (sys.argv[1] in server)
    return True

def ops(i):
    if len(sys.argv) > 2:
        return "/usr/bin/sudo /usr/bin/docker-enter %s %s" % (i,sys.argv[2])
    else:
        return "/usr/bin/sudo /usr/bin/docker-enter %s" % i

class ContainerTree(npyscreen.MLTree):
    def handle_mouse_event(self,m):
        super(ContainerTree,self).handle_mouse_event(m)
        self.h_select(m)

    def h_select(self,ch):
       if self.cursor_line==0:
           return
       item = self.values[self.cursor_line]
       global execl
       ssh_opts = [i for i in os.getenv('SSH_OPTS', "").split(" ") if len(i)>0]
       if item.operation:
          execl = ["/usr/bin/ssh","-t","-A","-o","StrictHostKeyChecking=no"]+ssh_opts+[ item.address, item.operation]
       else:
          execl = ["/usr/bin/ssh","-t","-A","-o","StrictHostKeyChecking=no"]+ssh_opts+[ item.address]
       self.parentForm.parentApp.switchForm(None)

class BaseTreeForm(npyscreen.FormBaseNew):
      def create(self):
        env = consul("agent/self")["Config"]["Datacenter"]
        title = "In the "+env+" dc: (updated at "+time.ctime()+")"
        cats = [consul("health/service/"+k+"?passing=true") for (k,v) in consul("catalog/services").items() if 'registrator' in v]
        ssh  = consul("health/service/ssh?passing=true")
        addresses = dict([(host['Node']['Node'],host['Node']['Address']) for host in ssh])
        hosts = dict([(host['Node']['Node'],[]) for host in ssh if matches(host['Node']['Node'])])
        #title = ssh[0]
        dockers = [serv['Service']['ID'].split(":")[0:2]+[serv["Service"]["Service"]] for serv in sum(cats,[])]
        types=dict()
        for (k,v,t) in dockers:
            if k in hosts:
                hosts[k].append(v)
                types[v]=t
        treedata = npyscreen.NPSTreeData(content=title, selectable=True, selected=True, ignoreRoot=False)
        for k,v in sorted(hosts.items()):
            branch = treedata.newChild(content=k, selectable=True)
            branch.operation = False
            branch.address = addresses[k]
            for i in sorted(v):
                leaf = branch.newChild(content=types[i], selectable=True)
                leaf.operation = ops(i)
                leaf.address = addresses[k]
        wgtree = self.add(ContainerTree)
        wgtree.parentForm = self
        wgtree.values = treedata
        self.wgtree=wgtree


class ContainerTreeApp(npyscreen.StandardApp):    
    def while_waiting(self):
        self.queue_event(npyscreen.Event("REFRESH")) 

    def worker():
        ssh = consul("catalog/services")
        for _,index in consulgenerator():
            self.q.put(index)

    def onStart(self):
        self.q = Queue.Queue()
        self.t = threading.Thread(target=ContainerTreeApp.worker)
        self.add_event_hander("REFRESH", self.refresh) 
        self.addForm("MAIN", BaseTreeForm, framed=False, max_height=15)
        
    def refresh(self, event):        
        self.addForm("MAIN", BaseTreeForm, framed=False, max_height=15)
        self.switchForm("MAIN")
        self.resetHistory()

    def onCleanExit(self):
        pass

    def change_form(self, name):
        self.switchForm(name)


def main():
   try:
       if len(consul("catalog/service/ssh")) < 1:
           print "No ssh service in consul, try the included ssh.json"
       TA = ContainerTreeApp()
       TA.run()
       if len(execl) > 0:
           print " ".join(execl)
           sys.stdout.flush()
           subprocess.call(execl)
   except KeyboardInterrupt:
       print "Ctrl-c"
   except IOError:
       consul_host = os.getenv('CONSUL_HOST', "127.0.0.1")
       print "Error connecting to consul (%(consul_host)s:8500)" % locals()



if __name__ == '__main__':
    main()
